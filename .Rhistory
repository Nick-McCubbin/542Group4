sample(c(1, 2),1,prob = c(.40,.60))
sample(c(1, 2),1,prob = c(.40,.60))
2^4
View(buydata)
View(BOUGHT)
d = 4
(2^d)-2^(d+1)+1
2^d-2^(d+1)+1
d = 4
2^d-2^(d+1)+1
2^4-2^(4+1)+1
3^4-2^(4+1)+1
(3^4)-2^(4+1)+1
library(shiny); runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
data.frame(JohnsonJohnson)
JJ <- data.frame(JohnsonJohnson)
tsjj <- ts(JJ, start = input$start)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
tsJJ <- ts(JohnsonJohnson, start =input$start, frequency = 4)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
library(stas)
library(stats)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
autoplot(time, arimaplotdata)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
time(arimaA)
arimaA <- auto.arima(tsJJ)
tsJJ <- ts(JohnsonJohnson, start =input$start, frequency = 4)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
predict(arimaA)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
arimaA
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
JJ
tsJJ <- ts(JohnsonJohnson, start = input$start, frequency = 4)
tsJJ <- ts(JohnsonJohnson, start = 1960, frequency = 4)
arimaA <- auto.arima(tsJJ)
plot <- predict(arimaA,h=5)
plot(plot$pred)
plot$pred
plot <- predict(arimaA,h=10)
plot(plot$pred)
plot$pred
plot(tsJJ,plot$pred)
plot(JJ$JohnsonJohnson,plot$pred)
plot(arimA,plot$pred)
plot(arimaA,plot$pred)
autoplot(tsJJ,plot$pred)
tsjj1 <- tsJJ + plot$pred
tsjj1
time(arimaA)
autoplot(time(arimaA),plot$pred)
plot(time(arimaA),plot$pred)
plot$pred
time(arimaA)
plot(time(arimaA),plot$pred)
plot(plot$pred)
predict(arimaA,h=5)
plot <- predict(arimaA,h=10)
predict(arimaA,h=10)
plot <- predict(arimaA,n.ahead = 10)
plot
plot(tsJJ,plot$pred)
tsJJ
autoplot(tsJJ,plot$pred)
autoplot(tsJJ,plot$pred)
plot(plot$pred)
plot(tsJJ, plot$pred  )
plot(JJ, plot$pred)
plot(plot$pred)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
plot(plot$pred,tsJJ)
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
tsJJ
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
runApp('C:/Users/nickm/Downloads/Midterm_Jett.R')
JohnsonJohnson
library(survival)
parta <- survfit(Surv(days,failed==1)~1, data = summary)
datacondensed <- subset(data,select = c(date,serial_number,model,failure,smart_1_raw,smart_5_raw,smart_9_raw,smart_194_raw,smart_197_raw))
# Create an empty list to store the data frames
data_list <- list()
{
# Loop through the daily .csv files in each folder
for (file in list.files()) {
# Read the .csv file into a data frame and append it to the list
data_list[[length(data_list) + 1]] <- read.csv(file)
}
}
# # Combine the data frames in the list into one large data frame
data <- do.call("rbind", data_list[1:631])
library(dplyr)
library(gbm)
library(ggfortify)
library(survival)
library(lubridate)
datacondensed <- subset(data,select = c(date,serial_number,model,failure,smart_1_raw,smart_5_raw,smart_9_raw,smart_194_raw,smart_197_raw))
combined <- datacondensed %>%
group_by(serial_number,model) %>%
mutate(ifelse(failure == 1,"left censored","right censored")) %>%
mutate(days = smart_9_raw/24)
combined$date <- ymd(combined$date)
summary <- summarise(combined,
days = as.numeric(max(date)-min(date)),
smart9 = max(smart_9_raw)/24,
max_1 = max(smart_1_raw),
max_5 = max(smart_5_raw),
max_194 = max(smart_194_raw),
failed = max(failure))
model <- coxph(Surv(days,failed)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
parta <- survfit(Surv(days,failed==1)~1, data = summary)
parta <- survfit(Surv(days,failed==1)~1, data = summary)
autoplot(parta)
model <- coxph(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
parta <- survfit(Surv(smart9,failed==1)~1, data = summary)
autoplot(parta)
model <- coxph(Surv(days,failed==1)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
parta <- survfit(Surv(days,failed==1)~1, data = summary)
autoplot(parta)
model <- coxph(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
model <- coxph(Surv(days,failed==1)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
summary(parta)
summary(model)
summary(parta)
parta <- survfit(Surv(days,failed==1)~1, data = summary)
summary(parta)
parta <- survfit(Surv(smart9,failed==1)~1, data = summary)
summary(parta)
model <- coxph(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
autoplot(survfit(parta), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
autoplot(parta, lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
summary(parta)
summary(model)
summary(survfit(model))
summary(survfit(model),times = 30*[1:12])
summary(survfit(model),times = 30*(1:12))
exp(coef(model))
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
summary(model,times = 30*(1:12))
summary(model)
summary(survfit(parta),times = 30*(1:12))
summary(parta,times = 30*(1:12))
100-98.6
anova(model,test = 'LRT")
anova(model,test = 'LRT")
anova(model,test = 'LRT")
)
residuals <- cox.zph(model)$resid
residuals <- cox.zph(model)$resid
ggplot(residuals, aes(time, scaled)) +
geom_line(lty = 1:3, col = 1:3) +
xlab("Time (days)") +
ylab("Scaled Schoenfeld residuals")
residuals <- cox.zph(model)$resid
ggplot(residuals, aes(time, scaled)) +
geom_line(lty = 1:3, col = 1:3) +
xlab("Time (days)") +
ylab("Scaled Schoenfeld residuals")
ggplot(residuals, aes(time, scaled)) +
geom_line() +
xlab("Time (days)") +
ylab("Scaled Schoenfeld residuals")
residuals <- cox.zph(model)$resid
residuals
residuals1 <- cox.zph(model)$resid
plot(residuals)
plot(residuals)
plot(cox.zph(model))
cox.zph(cox, transform = 'identity')
cox.zph(model, transform = 'identity')
residuals <- cox.zph(model)
summary <- summarise(combined,
days = as.numeric(max(date)-min(date)),
smart9 = max(smart_9_raw)/24,
max_1 = max(smart_1_raw),
max_5 = max(smart_5_raw),
max_194 = max(smart_194_raw),
sd_smart_1 = sd(smart_1_raw),
sd_smart5 = sd(smart_5_raw),
failed = max(failure))
parta <- survfit(Surv(smart9,failed==1)~1, data = summary)
autoplot(parta, lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
summary(parta,times = 30*(1:12))
model <- coxph(Surv(smart9,failed==1)~max_1 + max_5 + max_194 + sd_smart_1 + sd_smart5, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
exp(coef(model))
summary(model)
residuals <- cox.zph(model)
model <- coxph(Surv(smart9,failed==1)~max_1 + max_5 + max_194 + sd_smart_1 + sd_smart5, data = summary)
residuals <- cox.zph(model)
summary <- summarise(combined,
days = as.numeric(max(date)-min(date)),
smart9 = max(smart_9_raw)/24,
max_1 = max(smart_1_raw),
max_5 = max(smart_5_raw),
max_194 = max(smart_194_raw),
failed = max(failure))
install.packages("glmnet")
library(glmnet)
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1))~max_1 + max_5 + max_194, data=summary)
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary), y = Surv(smart9, failed==1), family = "cox")
summary
model2 <- cv.glmnet(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary, y = Surv(smart9, failed==1), family = "cox")
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary), y = Surv(smart9, failed==1), family = "cox")
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary), y = Surv(summary$smart9, failed==1), family = "cox")
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary), y = Surv(summary$smart9, summary$failed==1), family = "cox")
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary), y = parta, family = "cox")
model2 <- cv.glmnet(model.matrix(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data=summary), y = Surv(summary$smart9, summary$failed==1), family = "cox")
predictor_matrix <- model.matrix(Surv(smart9, failed) ~ max_1 + max_5 + max_194,
data = summary)
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(smart9, failed),
family = "cox")
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed),
family = "cox")
# remove rows with missing values in the response variable
summary <- na.omit(summary[, c("smart9", "failed")])
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed),
family = "cox")
predictor_matrix <- model.matrix(Surv(smart9, failed==1) ~ max_1 + max_5 + max_194,
data = summary)
predictor_matrix <- model.matrix(Surv(smart9, failed==1) ~ max_1 + max_5 + max_194,
data = summary)
predictor_matrix <- model.matrix(Surv(smart9, failed) ~ max_1 + max_5 + max_194,
data = summary)
summary <- summarise(combined,
days = as.numeric(max(date)-min(date)),
smart9 = max(smart_9_raw)/24,
max_1 = max(smart_1_raw),
max_5 = max(smart_5_raw),
max_194 = max(smart_194_raw),
failed = max(failure))
predictor_matrix <- model.matrix(Surv(smart9, failed) ~ max_1 + max_5 + max_194,
data = summary)
# remove rows with missing values in the response variable
summary <- na.omit(summary[, c("smart9", "failed")])
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed),
family = "cox")
predictor_matrix <- model.matrix(Surv(smart9, failed) ~ max_1 + max_5 + max_194,
data = summary,
na.action = "na.exclude")
summary <- summarise(combined,
days = as.numeric(max(date)-min(date)),
smart9 = max(smart_9_raw)/24,
max_1 = max(smart_1_raw),
max_5 = max(smart_5_raw),
max_194 = max(smart_194_raw),
failed = max(failure))
predictor_matrix <- model.matrix(Surv(smart9, failed) ~ max_1 + max_5 + max_194,
data = summary,
na.action = "na.exclude")
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed),
family = "cox")
# remove rows with missing values in the response variable
summary <- na.omit(summary[, c("smart9", "failed")])
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed),
family = "cox")
predictor_matrix <- model.matrix(Surv(smart9, failed) ~ max_1 + max_5 + max_194,
data = summary,
na.action = "na.exclude")
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed),
family = "cox")
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9, summary$failed[1:49099]),
family = "cox")
# fit a Cox proportional hazards model using the LASSO method
model2 <- cv.glmnet(x = predictor_matrix,
y = Surv(summary$smart9[1:49099], summary$failed[1:49099]),
family = "cox")
#Too high correlation between variables so i get an error
residuals <- cox.zph(model2)$resid
model2
cox.zph(model2, transform = 'identity')
model2_coxph <- predict(model2, s = "lambda.min", type = "coxph")
# extract the fitted Cox proportional hazards model from the LASSO model
model2_coxph <- predict(model2 type = "coxph")
# extract the fitted Cox proportional hazards model from the LASSO model
model2_coxph <- predict(model2, type = "coxph")
# extract the fitted Cox proportional hazards model from the LASSO model
model2_coxph <- predict(model2, type = "coefficients")
# compute the scaled Schoenfeld residuals
residuals <- cox.zph(model2_coxph, transform = "identity")$resid
model2_coxph <- predict(model2, s = "lambda.min", type = "coefficients")
# compute the scaled Schoenfeld residuals
residuals <- cox.zph(model2_coxph, transform = "identity")$resid
install.packages("survminer")
ggsurvplot(model,
data = summary,
pval = TRUE,
xlim = c(0, 3000),
resid = TRUE,
residuals_line_color = "red")
library(survminer)
ggsurvplot(model,
data = summary,
pval = TRUE,
xlim = c(0, 3000),
resid = TRUE,
residuals_line_color = "red")
install.packages("ggsurvfit")
# model2 <- cv.glmnet(x = predictor_matrix,
#                     y = Surv(summary$smart9[1:49099], summary$failed[1:49099]),
#                     family = "cox")
esiduals <- cox.zph(model2_coxph, transform = "identity")$resid
# model2 <- cv.glmnet(x = predictor_matrix,
#                     y = Surv(summary$smart9[1:49099], summary$failed[1:49099]),
#                     family = "cox")
esiduals <- cox.zph(model, transform = "identity")$resid
ggsurvplot(model,
data = summary,
pval = TRUE,
xlim = c(0, 3000),
resid = TRUE,
residuals_line_color = "red")
library(survminer)
ggsurvplot(model,
data = summary,
pval = TRUE,
xlim = c(0, 3000),
resid = TRUE,
residuals_line_color = "red")
ggsurvplot(model,
data = summary,
pval = TRUE,
xlim = c(0, 3000),
resid = TRUE,
residuals_line_color = "red")
ggsurvplot(model,
data = summary)
cox.zph(model, test = "Schoenfeld")
residuals <- cox.zph(model)$resid
summary <- summarise(combined,
days = as.numeric(max(date)-min(date)),
smart9 = max(smart_9_raw)/24,
max_1 = max(smart_1_raw),
max_5 = max(smart_5_raw),
max_194 = max(smart_194_raw),
failed = max(failure))
residuals <- cox.zph(model)$resid
residuals <- cox.zph(model)$resid
model <- coxph(Surv(smart9,failed==1)~max_1 + max_5 + max_194, data = summary)
autoplot(survfit(model), lty = 1:3, col = 1:3, xlab = "Time (days)", ylab = "Survival probability")
ggplot(residuals, aes(time, scaled)) +
geom_line(lty = 1:3, col = 1:3) +
xlab("Time (days)") +
ylab("Scaled Schoenfeld residuals")
residuals <- cox.zph(model)
setwd("~/GitHub/542Group4")
ranking <- read.csv("rankings.csv")
teams <- read.csv("teams.csv")
ratios <- read.csv("ratios.csv")
View(ranking)
View(ranking)
View(ratios)
View(teams)
split.data.frame(teams)
split.data.frame(teams,";")
strsplit(teams,";")
strsplit(teams,;)
strsplit(teams,';')
unlist(teams)
teams <- unlist(teams)
teams <- data.frame(column1 = teams[1],column2 = teams[2])
teams
teams <- data.frame(column1 = teams[,1],column2 = teams[,2])
teams
teams <- read.csv("teams.csv")
teams <- unlist(teams)
teams <- data.frame(column1 = teams[,1],column2 = teams[,2])
teams <- data.frame(column1 = teams[1,],column2 = teams[2,])
teams <- read.csv("teams.csv")
class(teams$Team.Group)
data <- read.csv("WCdata.csv")
View(data)
data <- read.csv("WCdata.csv")
View(data)
View(data)
